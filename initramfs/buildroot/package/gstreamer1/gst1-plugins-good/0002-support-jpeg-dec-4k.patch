diff -uNr gst-plugins-good-1.22.9.001/sys/v4l2/gstv4l2object.c gst-plugins-good-1.22.9.002/sys/v4l2/gstv4l2object.c
--- gst-plugins-good-1.22.9.001/sys/v4l2/gstv4l2object.c	2024-07-23 19:58:02.187941879 +0800
+++ gst-plugins-good-1.22.9.002/sys/v4l2/gstv4l2object.c	2024-07-23 20:04:10.857927060 +0800
@@ -2886,6 +2886,14 @@
   } else if (size.type == V4L2_FRMSIZE_TYPE_STEPWISE) {
     guint32 maxw, maxh, step_w, step_h;
 
+    /* [Wang.Zhou]Work around for jpeg dec 4k */
+    if(GST_IS_VIDEO_DECODER(v4l2object->element)){
+      if (gst_structure_has_name(template, "image/jpeg")
+            || gst_structure_has_name(template, "video/x-raw")){
+        size.stepwise.max_width = size.stepwise.max_height;
+      }
+    }
+
     GST_DEBUG_OBJECT (v4l2object->dbg_obj, "we have stepwise frame sizes:");
     GST_DEBUG_OBJECT (v4l2object->dbg_obj, "min width:   %d",
         size.stepwise.min_width);
@@ -4328,6 +4336,7 @@
   width = fmt.fmt.pix.width;
   height = fmt.fmt.pix.height;
 
+#if 0 /* [Wang.Zhou] Use fmt from VIDIOC_G_FMT */
   /* Use the default compose rectangle */
   memset (&sel, 0, sizeof (struct v4l2_selection));
   sel.type = v4l2object->type;
@@ -4349,6 +4358,7 @@
     width = r->width;
     height = r->height;
   }
+#endif
 
   switch (fmt.fmt.pix.field) {
     case V4L2_FIELD_ANY:
