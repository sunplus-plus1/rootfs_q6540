diff -Naur -x '*.o' -x '*.so' -x '*.so.*' -x '*.texi' -x '.*.txt' -x '*.mak' -x '*.pc' -x '*.d' -x .applied_patches_list -x 'config*' -x '*_list.c' -x avconfig.h -x ffversion.h a/libavcodec/allcodecs.c b/libavcodec/allcodecs.c
--- a/libavcodec/allcodecs.c	2022-04-15 04:13:38.000000000 +0800
+++ b/libavcodec/allcodecs.c	2024-08-22 15:03:36.000000000 +0800
@@ -835,6 +835,8 @@
 extern AVCodec ff_vp9_qsv_decoder;
 extern AVCodec ff_vp9_vaapi_encoder;
 extern AVCodec ff_vp9_qsv_encoder;
+extern AVCodec ff_jpeg_v4l2m2m_encoder;
+extern AVCodec ff_jpeg_v4l2m2m_decoder;
 
 // The iterate API is not usable with ossfuzz due to the excessive size of binaries created
 #if CONFIG_OSSFUZZ
diff -Naur -x '*.o' -x '*.so' -x '*.so.*' -x '*.texi' -x '.*.txt' -x '*.mak' -x '*.pc' -x '*.d' -x .applied_patches_list -x 'config*' -x '*_list.c' -x avconfig.h -x ffversion.h a/libavcodec/v4l2_context.c b/libavcodec/v4l2_context.c
--- a/libavcodec/v4l2_context.c	2022-04-15 04:13:38.000000000 +0800
+++ b/libavcodec/v4l2_context.c	2024-08-22 15:09:22.000000000 +0800
@@ -158,6 +158,7 @@
  * returns 1 if reinit was successful, negative if it failed
  * returns 0 if reinit was not executed
  */
+#define V4L2_EVENT_SKIP                    (V4L2_EVENT_PRIVATE_START + 2)
 static int v4l2_handle_event(V4L2Context *ctx)
 {
     V4L2m2mContext *s = ctx_to_m2mctx(ctx);
@@ -172,11 +173,18 @@
         return 0;
     }
 
+    av_log(logger(ctx), AV_LOG_WARNING, "%s VIDIOC_DQEVENT 0x%x\n", ctx->name, evt.type);
+
     if (evt.type == V4L2_EVENT_EOS) {
         ctx->done = 1;
         return 0;
     }
 
+    if (evt.type == V4L2_EVENT_SKIP) {
+        av_log(logger(ctx), AV_LOG_WARNING, "%s VIDIOC_DQEVENT V4L2_EVENT_SKIP\n", ctx->name);
+        return 0;
+    }
+
     if (evt.type != V4L2_EVENT_SOURCE_CHANGE)
         return 0;
 
@@ -344,11 +352,12 @@
         if (timeout == 0) {
             for (i = 0; i < ctx->num_buffers; i++) {
                 if (ctx->buffers[i].status != V4L2BUF_AVAILABLE)
-                    av_log(logger(ctx), AV_LOG_WARNING, "%s POLLERR\n", ctx->name);
+                    av_log(logger(ctx), AV_LOG_WARNING, "%s POLLERR, ctx->buffers[i].status: %d, %s: %d\n",
+                    ctx->name, ctx->buffers[i].status, __FUNCTION__, __LINE__);
             }
         }
         else
-            av_log(logger(ctx), AV_LOG_WARNING, "%s POLLERR\n", ctx->name);
+            av_log(logger(ctx), AV_LOG_WARNING, "%s POLLERR, %s: %d\n", ctx->name, __FUNCTION__, __LINE__);
 
         return NULL;
     }
@@ -365,6 +374,8 @@
             /* if re-init was successful drop the buffer (if there was one)
              * since we had to reconfigure capture (unmap all buffers)
              */
+            av_log(logger(ctx), AV_LOG_WARNING, "%s POLLPRI v4l2_handle_event ret: %d, %s: %d\n",
+            ctx->name, __FUNCTION__, __LINE__, ret);
             return NULL;
         }
     }
diff -Naur -x '*.o' -x '*.so' -x '*.so.*' -x '*.texi' -x '.*.txt' -x '*.mak' -x '*.pc' -x '*.d' -x .applied_patches_list -x 'config*' -x '*_list.c' -x avconfig.h -x ffversion.h a/libavcodec/v4l2_fmt.c b/libavcodec/v4l2_fmt.c
--- a/libavcodec/v4l2_fmt.c	2021-10-22 01:06:35.000000000 +0800
+++ b/libavcodec/v4l2_fmt.c	2024-08-22 14:23:27.000000000 +0800
@@ -51,7 +51,7 @@
     { AV_FMT(YUV410P),     AV_CODEC(RAWVIDEO),    V4L2_FMT(YUV410) },
     { AV_FMT(YUV410P),     AV_CODEC(RAWVIDEO),    V4L2_FMT(YVU410) },
     { AV_FMT(NV12),        AV_CODEC(RAWVIDEO),    V4L2_FMT(NV12) },
-    { AV_FMT(NONE),        AV_CODEC(MJPEG),       V4L2_FMT(MJPEG) },
+    //{ AV_FMT(NONE),        AV_CODEC(MJPEG),       V4L2_FMT(MJPEG) },
     { AV_FMT(NONE),        AV_CODEC(MJPEG),       V4L2_FMT(JPEG) },
 #ifdef V4L2_PIX_FMT_SRGGB8
     { AV_FMT(BAYER_BGGR8), AV_CODEC(RAWVIDEO),    V4L2_FMT(SBGGR8) },
diff -Naur -x '*.o' -x '*.so' -x '*.so.*' -x '*.texi' -x '.*.txt' -x '*.mak' -x '*.pc' -x '*.d' -x .applied_patches_list -x 'config*' -x '*_list.c' -x avconfig.h -x ffversion.h a/libavcodec/v4l2_m2m.c b/libavcodec/v4l2_m2m.c
--- a/libavcodec/v4l2_m2m.c	2021-10-25 04:47:07.000000000 +0800
+++ b/libavcodec/v4l2_m2m.c	2024-08-22 14:23:27.000000000 +0800
@@ -149,6 +149,40 @@
 
     ofmt = s->output.format;
     cfmt = s->capture.format;
+
+	if (s->output.av_codec_id != AV_CODEC_ID_RAWVIDEO) {
+        if (V4L2_TYPE_IS_MULTIPLANAR(ofmt.type)) {
+            int mp_width = (ofmt.fmt.pix_mp.width + 15) / 16;
+            int mp_height = (ofmt.fmt.pix_mp.height + 15) / 16;
+            s->output.format.fmt.pix_mp.width = mp_width * 16;
+            s->output.format.fmt.pix_mp.height = mp_height * 16;
+        } else {
+            int mp_width = (ofmt.fmt.pix.width + 15) / 16;
+            int mp_height = (ofmt.fmt.pix.height + 15) / 16;
+            s->output.format.fmt.pix.width = mp_width * 16;
+            s->output.format.fmt.pix.height = mp_height * 16;
+        }
+
+        if (V4L2_TYPE_IS_MULTIPLANAR(cfmt.type)) {
+            int mp_width = (cfmt.fmt.pix_mp.width + 15) / 16;
+            int mp_height = (cfmt.fmt.pix_mp.height + 15) / 16;
+            s->capture.format.fmt.pix_mp.width = mp_width * 16;
+            s->capture.format.fmt.pix_mp.height = mp_height * 16;
+        } else {
+            int mp_width = (cfmt.fmt.pix.width + 15) / 16;
+            int mp_height = (cfmt.fmt.pix.height + 15) / 16;
+            s->capture.format.fmt.pix.width = mp_width * 16;
+            s->capture.format.fmt.pix.height = mp_height * 16;
+        }
+
+    }
+
+	av_log(log_ctx, AV_LOG_INFO, "s->avctx->width: %d, s->avctx->height: %d, s->avctx->coded_width: %d, s->avctx->coded_height: %d\n",
+        s->avctx->width, s->avctx->height, s->avctx->coded_width, s->avctx->coded_height);
+
+    av_log(log_ctx, AV_LOG_INFO, "output.width: %d, output.height: %d, capture.width: %d, capture.height: %d\n",
+    s->output.width, s->output.height, s->capture.width, s->capture.height);
+
     av_log(log_ctx, AV_LOG_INFO, "requesting formats: output=%s capture=%s\n",
                                  av_fourcc2str(V4L2_TYPE_IS_MULTIPLANAR(ofmt.type) ?
                                                ofmt.fmt.pix_mp.pixelformat :
@@ -157,24 +191,12 @@
                                                cfmt.fmt.pix_mp.pixelformat :
                                                cfmt.fmt.pix.pixelformat));
 
-    ret = ff_v4l2_context_set_format(&s->output);
-    if (ret) {
-        av_log(log_ctx, AV_LOG_ERROR, "can't set v4l2 output format\n");
-        goto error;
-    }
-
     ret = ff_v4l2_context_set_format(&s->capture);
     if (ret) {
         av_log(log_ctx, AV_LOG_ERROR, "can't to set v4l2 capture format\n");
         goto error;
     }
 
-    ret = ff_v4l2_context_init(&s->output);
-    if (ret) {
-        av_log(log_ctx, AV_LOG_ERROR, "no v4l2 output context's buffers\n");
-        goto error;
-    }
-
     /* decoder's buffers need to be updated at a later stage */
     if (s->avctx && !av_codec_is_decoder(s->avctx->codec)) {
         ret = ff_v4l2_context_init(&s->capture);
@@ -184,6 +206,18 @@
         }
     }
 
+	ret = ff_v4l2_context_set_format(&s->output);
+    if (ret) {
+        av_log(log_ctx, AV_LOG_ERROR, "can't set v4l2 output format\n");
+        goto error;
+    }
+
+	ret = ff_v4l2_context_init(&s->output);
+    if (ret) {
+        av_log(log_ctx, AV_LOG_ERROR, "no v4l2 output context's buffers\n");
+        goto error;
+    }
+
     return 0;
 
 error:
@@ -256,6 +290,8 @@
     if (atomic_load(&s->refcount))
         while(sem_wait(&s->refsync) == -1 && errno == EINTR);
 
+	av_log(log_ctx, AV_LOG_ERROR, "capture.streamon: %s, output.streamon: %s\n", s->capture.streamon ? "true" : "false", s->output.streamon ? "true" : "false");
+
     ret = ff_v4l2_context_set_status(&s->output, VIDIOC_STREAMOFF);
     if (ret) {
         av_log(log_ctx, AV_LOG_ERROR, "output VIDIOC_STREAMOFF\n");
@@ -288,24 +324,12 @@
         goto error;
     }
 
-    ret = ff_v4l2_context_set_format(&s->output);
-    if (ret) {
-        av_log(log_ctx, AV_LOG_ERROR, "can't set v4l2 output format\n");
-        goto error;
-    }
-
-    ret = ff_v4l2_context_set_format(&s->capture);
+	ret = ff_v4l2_context_set_format(&s->capture);
     if (ret) {
         av_log(log_ctx, AV_LOG_ERROR, "can't to set v4l2 capture format\n");
         goto error;
     }
 
-    ret = ff_v4l2_context_init(&s->output);
-    if (ret) {
-        av_log(log_ctx, AV_LOG_ERROR, "no v4l2 output context's buffers\n");
-        goto error;
-    }
-
     /* decoder's buffers need to be updated at a later stage */
     if (s->avctx && !av_codec_is_decoder(s->avctx->codec)) {
         ret = ff_v4l2_context_init(&s->capture);
@@ -315,6 +339,18 @@
         }
     }
 
+	ret = ff_v4l2_context_set_format(&s->output);
+    if (ret) {
+        av_log(log_ctx, AV_LOG_ERROR, "can't set v4l2 output format\n");
+        goto error;
+    }
+
+    ret = ff_v4l2_context_init(&s->output);
+    if (ret) {
+        av_log(log_ctx, AV_LOG_ERROR, "no v4l2 output context's buffers\n");
+        goto error;
+    }
+
     return 0;
 
 error:
diff -Naur -x '*.o' -x '*.so' -x '*.so.*' -x '*.texi' -x '.*.txt' -x '*.mak' -x '*.pc' -x '*.d' -x .applied_patches_list -x 'config*' -x '*_list.c' -x avconfig.h -x ffversion.h a/libavcodec/v4l2_m2m_dec.c b/libavcodec/v4l2_m2m_dec.c
--- a/libavcodec/v4l2_m2m_dec.c	2022-04-15 04:13:38.000000000 +0800
+++ b/libavcodec/v4l2_m2m_dec.c	2024-08-22 15:02:02.000000000 +0800
@@ -34,6 +34,8 @@
 #include "v4l2_m2m.h"
 #include "v4l2_fmt.h"
 
+static int receiveFirstIFrame = 0;
+
 static int v4l2_try_start(AVCodecContext *avctx)
 {
     V4L2m2mContext *s = ((V4L2m2mPriv*)avctx->priv_data)->context;
@@ -102,6 +104,7 @@
     return 0;
 }
 
+#define V4L2_EVENT_SKIP                    (V4L2_EVENT_PRIVATE_START + 2)
 static int v4l2_prepare_decoder(V4L2m2mContext *s)
 {
     struct v4l2_event_subscription sub;
@@ -130,6 +133,18 @@
         av_log(s->avctx, AV_LOG_WARNING,
                "the v4l2 driver does not support end of stream VIDIOC_SUBSCRIBE_EVENT\n");
 
+    /*
+    All the data in the stream buffer was processed. Stream buffer must be updated
+    before calling H264Decode again.
+    A input frame is dropped in decoding for some reason
+    */
+    memset(&sub, 0, sizeof(sub));
+    sub.type = V4L2_EVENT_SKIP;
+    ret = ioctl(s->fd, VIDIOC_SUBSCRIBE_EVENT, &sub);
+    if (ret < 0)
+        av_log(s->avctx, AV_LOG_WARNING,
+               "the v4l2 driver does not support V4L2_EVENT_SKIP\n");
+
     return 0;
 }
 
@@ -145,6 +160,8 @@
         if (ret < 0 && ret != AVERROR_EOF)
             return ret;
     }
+    //av_log(avctx, AV_LOG_DEBUG, "%s, %d, s->buf_pkt.pts: %lld, s->buf_pkt.dts: %lld, s->buf_pkt.size: %d, isKeyFrame: %d\n",
+    //__FUNCTION__, __LINE__, s->buf_pkt.pts, s->buf_pkt.dts, s->buf_pkt.size, (s->buf_pkt.flags & AV_PKT_FLAG_KEY));
 
     if (s->draining)
         goto dequeue;
@@ -153,6 +170,17 @@
     if (ret < 0 && ret != AVERROR(EAGAIN))
         goto fail;
 
+    if (!receiveFirstIFrame) {
+        av_log(avctx, AV_LOG_WARNING, "%s, %d, receiveFirstIFrame s->buf_pkt.pts: %lld, s->buf_pkt.dts: %lld, s->buf_pkt.size: %d, isKeyFrame: %d\n",
+        __FUNCTION__, __LINE__, s->buf_pkt.pts, s->buf_pkt.dts, s->buf_pkt.size, (s->buf_pkt.flags & AV_PKT_FLAG_KEY));
+        if (!(s->buf_pkt.flags & AV_PKT_FLAG_KEY)) {
+            av_packet_unref(&s->buf_pkt);
+            goto dequeue;
+        } else {
+            receiveFirstIFrame = 1;
+        }
+    }
+
     /* if EAGAIN don't unref packet and try to enqueue in the next iteration */
     if (ret != AVERROR(EAGAIN))
         av_packet_unref(&s->buf_pkt);
@@ -160,6 +188,7 @@
     if (!s->draining) {
         ret = v4l2_try_start(avctx);
         if (ret) {
+            av_log(avctx, AV_LOG_ERROR, "v4l2_try_start ret: %d, %s, %d\n", ret, __FUNCTION__, __LINE__);
             /* cant recover */
             if (ret != AVERROR(ENOMEM))
                 ret = 0;
@@ -180,6 +209,7 @@
     V4L2m2mContext *s;
     V4L2m2mPriv *priv = avctx->priv_data;
     int ret;
+    receiveFirstIFrame = 0;
 
     ret = ff_v4l2_m2m_create_context(priv, &s);
     if (ret < 0)
@@ -261,3 +291,4 @@
 M2MDEC(vc1 ,  "VC1",   AV_CODEC_ID_VC1,        NULL);
 M2MDEC(vp8,   "VP8",   AV_CODEC_ID_VP8,        NULL);
 M2MDEC(vp9,   "VP9",   AV_CODEC_ID_VP9,        NULL);
+M2MDEC(jpeg,  "JPEG",  AV_CODEC_ID_MJPEG,      NULL);
diff -Naur -x '*.o' -x '*.so' -x '*.so.*' -x '*.texi' -x '.*.txt' -x '*.mak' -x '*.pc' -x '*.d' -x .applied_patches_list -x 'config*' -x '*_list.c' -x avconfig.h -x ffversion.h a/libavcodec/v4l2_m2m_enc.c b/libavcodec/v4l2_m2m_enc.c
--- a/libavcodec/v4l2_m2m_enc.c	2022-04-15 04:13:38.000000000 +0800
+++ b/libavcodec/v4l2_m2m_enc.c	2024-08-22 15:13:32.000000000 +0800
@@ -43,11 +43,25 @@
     struct v4l2_streamparm parm = { 0 };
 
     parm.type = V4L2_TYPE_IS_MULTIPLANAR(s->output.type) ? V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE : V4L2_BUF_TYPE_VIDEO_OUTPUT;
-    parm.parm.output.timeperframe.denominator = den;
-    parm.parm.output.timeperframe.numerator = num;
+    parm.parm.output.timeperframe.denominator = num;
+    parm.parm.output.timeperframe.numerator = den;
 
     if (ioctl(s->fd, VIDIOC_S_PARM, &parm) < 0)
-        av_log(s->avctx, AV_LOG_WARNING, "Failed to set timeperframe");
+        av_log(s->avctx, AV_LOG_WARNING, "Failed to set output timeperframe = %d/%d\n", num, den);
+    else
+        av_log(s->avctx, AV_LOG_DEBUG, "Encoder: output timeperframe = %d/%d\n", num, den);
+
+    struct v4l2_streamparm parm_capture = { 0 };
+
+    parm_capture.type = V4L2_TYPE_IS_MULTIPLANAR(s->capture.type) ? V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE : V4L2_BUF_TYPE_VIDEO_CAPTURE;
+    parm_capture.parm.capture.timeperframe.denominator = num;
+    parm_capture.parm.capture.timeperframe.numerator = den;
+
+    if (ioctl(s->fd, VIDIOC_S_PARM, &parm_capture) < 0)
+        av_log(s->avctx, AV_LOG_WARNING, "Failed to set capture timeperframe = %d/%d\n", num, den);
+    else
+        av_log(s->avctx, AV_LOG_DEBUG, "Encoder: capture timeperframe = %d/%d\n", num, den);
+
 }
 
 static inline void v4l2_set_ext_ctrl(V4L2m2mContext *s, unsigned int id, signed int value, const char *name, int log_warning)
@@ -66,7 +80,7 @@
 
     if (ioctl(s->fd, VIDIOC_S_EXT_CTRLS, &ctrls) < 0)
         av_log(s->avctx, log_warning || errno != EINVAL ? AV_LOG_WARNING : AV_LOG_DEBUG,
-               "Failed to set %s: %s\n", name, strerror(errno));
+               "Failed to set %s = %d %s\n", name, value, strerror(errno));
     else
         av_log(s->avctx, AV_LOG_DEBUG, "Encoder: %s = %d\n", name, value);
 }
@@ -190,12 +204,12 @@
      * settingss
      */
     if (avctx->framerate.num || avctx->framerate.den)
-        v4l2_set_timeperframe(s, avctx->framerate.den, avctx->framerate.num);
+        v4l2_set_timeperframe(s, avctx->framerate.num, avctx->framerate.den);
 
     /* set ext ctrls */
     v4l2_set_ext_ctrl(s, MPEG_CID(HEADER_MODE), MPEG_VIDEO(HEADER_MODE_SEPARATE), "header mode", 0);
     v4l2_set_ext_ctrl(s, MPEG_CID(BITRATE) , avctx->bit_rate, "bit rate", 1);
-    v4l2_set_ext_ctrl(s, MPEG_CID(FRAME_RC_ENABLE), 1, "frame level rate control", 0);
+    v4l2_set_ext_ctrl(s, MPEG_CID(FRAME_RC_ENABLE), 0, "frame level rate control", 0);
     v4l2_set_ext_ctrl(s, MPEG_CID(GOP_SIZE), avctx->gop_size,"gop size", 1);
 
     av_log(avctx, AV_LOG_DEBUG,
@@ -206,13 +220,27 @@
 
     switch (avctx->codec_id) {
     case AV_CODEC_ID_H264:
-        if (avctx->profile != FF_PROFILE_UNKNOWN) {
+        if (avctx->profile >= 0) {
             val = v4l2_h264_profile_from_ff(avctx->profile);
-            if (val < 0)
-                av_log(avctx, AV_LOG_WARNING, "h264 profile not found\n");
-            else
+            if (val < 0) {
+                av_log(avctx, AV_LOG_WARNING, "h264 profile not found. set default value: V4L2_MPEG_VIDEO_H264_PROFILE_BASELINE\n");
+                v4l2_set_ext_ctrl(s, MPEG_CID(H264_PROFILE), V4L2_MPEG_VIDEO_H264_PROFILE_BASELINE, "h264 profile", 1);
+            } else {
                 v4l2_set_ext_ctrl(s, MPEG_CID(H264_PROFILE), val, "h264 profile", 1);
+            }
+        } else {
+            v4l2_set_ext_ctrl(s, MPEG_CID(H264_PROFILE), V4L2_MPEG_VIDEO_H264_PROFILE_BASELINE, "h264 profile", 1);
+        }
+
+        if (avctx->level >= 0) {
+            v4l2_set_ext_ctrl(s, MPEG_CID(H264_LEVEL), avctx->level, "h264 level", 1);
+        } else {
+            v4l2_set_ext_ctrl(s, MPEG_CID(H264_LEVEL), V4L2_MPEG_VIDEO_H264_LEVEL_4_0, "h264 level", 1);
         }
+
+        v4l2_set_ext_ctrl(s, MPEG_CID(H264_LOOP_FILTER_ALPHA), 0, "H264_LOOP_FILTER_ALPHA", 1);
+        v4l2_set_ext_ctrl(s, MPEG_CID(H264_LOOP_FILTER_BETA), 0,"H264_LOOP_FILTER_BETA", 1);
+
         qmin_cid = MPEG_CID(H264_MIN_QP);
         qmax_cid = MPEG_CID(H264_MAX_QP);
         qmin = 0;
@@ -277,8 +305,19 @@
     V4L2Context *const output = &s->output;
 
 #ifdef V4L2_CID_MPEG_VIDEO_FORCE_KEY_FRAME
-    if (frame && frame->pict_type == AV_PICTURE_TYPE_I)
-        v4l2_set_ext_ctrl(s, MPEG_CID(FORCE_KEY_FRAME), 0, "force key frame", 1);
+    if (frame && frame->pict_type == AV_PICTURE_TYPE_I) {
+        #if 1
+        v4l2_set_ext_ctrl(s, MPEG_CID(FORCE_KEY_FRAME), 1, "force key frame", 1);
+        #else
+        struct v4l2_control ctrl;
+        memset(&ctrl, 0, sizeof(ctrl));
+        ctrl.id = MPEG_CID(FORCE_KEY_FRAME);
+        ctrl.value = 1;
+
+        int ret = ioctl(s->fd, VIDIOC_S_CTRL, &ctrl);
+        av_log(avctx, AV_LOG_ERROR, "V4L2_CID_MPEG_VIDEO_FORCE_KEY_FRAME, ret = %d\n", ret);
+        #endif
+    }
 #endif
 
     return ff_v4l2_context_enqueue_frame(output, frame);
@@ -442,3 +481,4 @@
 M2MENC(h264, "H.264", options,       AV_CODEC_ID_H264);
 M2MENC(hevc, "HEVC",  options,       AV_CODEC_ID_HEVC);
 M2MENC(vp8,  "VP8",   options,       AV_CODEC_ID_VP8);
+M2MENC(jpeg, "JPEG",   options,     AV_CODEC_ID_MJPEG);
diff -Naur -x '*.o' -x '*.so' -x '*.so.*' -x '*.texi' -x '.*.txt' -x '*.mak' -x '*.pc' -x '*.d' -x .applied_patches_list -x 'config*' -x '*_list.c' -x avconfig.h -x ffversion.h a/libavformat/mov.c b/libavformat/mov.c
--- a/libavformat/mov.c	2022-04-15 04:13:48.000000000 +0800
+++ b/libavformat/mov.c	2024-08-22 14:31:36.000000000 +0800
@@ -4882,6 +4882,9 @@
                 ", using it for dts\n", dts);
     }
     offset   = frag->base_data_offset + data_offset;
+    if (data_offset <= 0) {
+        offset = frag->implicit_offset;
+    }
     distance = 0;
     av_log(c->fc, AV_LOG_TRACE, "first sample flags 0x%x\n", first_sample_flags);
 
diff -Naur -x '*.o' -x '*.so' -x '*.so.*' -x '*.texi' -x '.*.txt' -x '*.mak' -x '*.pc' -x '*.d' -x .applied_patches_list -x 'config*' -x '*_list.c' -x avconfig.h -x ffversion.h a/libavformat/utils.c b/libavformat/utils.c
--- a/libavformat/utils.c	2022-04-15 04:13:48.000000000 +0800
+++ b/libavformat/utils.c	2024-08-22 14:25:06.000000000 +0800
@@ -886,6 +886,7 @@
 
         if (update_wrap_reference(s, st, pkt->stream_index, pkt) && st->internal->pts_wrap_behavior == AV_PTS_WRAP_SUB_OFFSET) {
             // correct first time stamps to negative values
+            av_log(s, AV_LOG_WARNING, "correct first time stamps to negative values.\n");
             if (!is_relative(st->first_dts))
                 st->first_dts = wrap_timestamp(st, st->first_dts);
             if (!is_relative(st->start_time))
@@ -1218,9 +1219,11 @@
         } else
             break;
         cur_dts = pktl->pkt.dts + pktl->pkt.duration;
+        av_log(s, AV_LOG_DEBUG, "update_initial_durations cur_dts %lld\n", cur_dts);
     }
     if (!pktl)
         st->cur_dts = cur_dts;
+    av_log(s, AV_LOG_DEBUG, "update_initial_durations st->cur_dts %lld\n", st->cur_dts);
 }
 
 static void compute_pkt_fields(AVFormatContext *s, AVStream *st,
@@ -4568,8 +4571,10 @@
          * timestamps have their first few packets buffered and the
          * timestamps corrected before they are returned to the user */
         st->cur_dts = RELATIVE_TS_BASE;
+        av_log(s, AV_LOG_TRACE, "st->cur_dts = RELATIVE_TS_BASE, %s: %d\n", __FUNCTION__, __LINE__);
     } else {
         st->cur_dts = AV_NOPTS_VALUE;
+        av_log(s, AV_LOG_TRACE, "st->cur_dts = AV_NOPTS_VALUE, %s: %d\n", __FUNCTION__, __LINE__);
     }
 
     st->index      = s->nb_streams;
